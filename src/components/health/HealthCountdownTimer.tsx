import React, { useState, useEffect, useRef } from 'react';

interface HealthCountdownTimerProps {
  timeRemainingHours: number | null; // Double from backend
  targetDate: string | null;
  isCompleted: boolean;
  hasRegressed?: boolean;
  className?: string;
  // Add metricId for unique localStorage keys
  metricId?: string;
  // Add flag to prevent refresh from overwriting localStorage
  isRefreshing?: boolean;
}

interface TimeLeft {
  days: number;
  hours: number;
  minutes: number;
  seconds: number;
}

function translateTimeUnit(unit: string): string {
  const translations: { [key: string]: string } = {
    'days': 'ng√†y',
    'hours': 'gi·ªù',
    'minutes': 'ph√∫t',
    'seconds': 'gi√¢y'
  };

  return translations[unit] || unit;
}

const HealthCountdownTimer: React.FC<HealthCountdownTimerProps> = ({
  timeRemainingHours,
  targetDate,
  isCompleted,
  hasRegressed = false,
  className = '',
  metricId = 'default',
  isRefreshing = false
}) => {
  const [timeLeft, setTimeLeft] = useState<TimeLeft>({
    days: 0,
    hours: 0,
    minutes: 0,
    seconds: 0,
  });

  // S·ª≠ d·ª•ng useRef ƒë·ªÉ l∆∞u th·ªùi ƒëi·ªÉm b·∫Øt ƒë·∫ßu v√† timeRemainingHours ban ƒë·∫ßu
  const startTimeRef = useRef<number>(Date.now());
  const initialTimeRemainingHoursRef = useRef<number | null>(timeRemainingHours);

  // FIX: Lo·∫°i b·ªè metricKey ƒë·ªÉ tr√°nh timer b·ªã reset li√™n t·ª•c
  // const metricKey = `${metricId}-${timeRemainingHours}`;

  // Get color based on remaining time
  const getCountdownColor = (hours: number): string => {
    if (hours <= 1) return 'text-red-600';
    if (hours <= 24) return 'text-orange-600';
    if (hours <= 168) return 'text-yellow-600';
    return 'text-blue-600';
  };

  // Get background color for urgency
  const getBackgroundColor = (hours: number): string => {
    if (hours <= 1) return 'bg-red-50 border-red-200';
    if (hours <= 24) return 'bg-orange-50 border-orange-200';
    if (hours <= 168) return 'bg-yellow-50 border-yellow-200';
    return 'bg-blue-50 border-blue-200';
  };

  // Logic countdown real-time
  useEffect(() => {
    // FIX: ƒê∆°n gi·∫£n h√≥a logic - ch·ªâ ki·ªÉm tra targetDate v√† isCompleted
    console.log(`üïê HealthCountdownTimer [${metricId}]: useEffect triggered`, {
      targetDate,
      timeRemainingHours,
      isCompleted,
      hasRegressed
    });

    // N·∫øu ƒë√£ ho√†n th√†nh, kh√¥ng c·∫ßn countdown
    if (isCompleted) {
      console.log(`üïê HealthCountdownTimer [${metricId}]: Completed, stopping timer`);
      setTimeLeft({ days: 0, hours: 0, minutes: 0, seconds: 0 });
      return;
    }

    // N·∫øu kh√¥ng c√≥ targetDate, kh√¥ng c·∫ßn countdown
    if (!targetDate) {
      console.log(`üïê HealthCountdownTimer [${metricId}]: No targetDate, stopping timer`);
      setTimeLeft({ days: 0, hours: 0, minutes: 0, seconds: 0 });
      return;
    }

    const calculateTime = () => {
      const now = Date.now();
      const targetTime = new Date(targetDate).getTime();

      // T√≠nh th·ªùi gian c√≤n l·∫°i tr·ª±c ti·∫øp t·ª´ targetDate
      const totalRemainingSeconds = Math.max(0, (targetTime - now) / 1000);

      const days = Math.floor(totalRemainingSeconds / (3600 * 24));
      const hours = Math.floor((totalRemainingSeconds % (3600 * 24)) / 3600);
      const minutes = Math.floor((totalRemainingSeconds % 3600) / 60);
      const seconds = Math.floor(totalRemainingSeconds % 60);

      const newTimeLeft = { days, hours, minutes, seconds };

      // FIX: Th√™m debug log cho timer update
      console.log(`üïê HealthCountdownTimer [${metricId}]: Timer update`, {
        totalRemainingSeconds,
        newTimeLeft,
        targetDate: new Date(targetDate).toISOString(),
        now: new Date(now).toISOString()
      });

      setTimeLeft(newTimeLeft);
    };

    // T√≠nh to√°n ngay l·∫≠p t·ª©c
    calculateTime();

    // B·∫Øt ƒë·∫ßu timer c·∫≠p nh·∫≠t m·ªói gi√¢y
    const timer = setInterval(calculateTime, 1000);

    console.log(`üïê HealthCountdownTimer [${metricId}]: Timer started, interval: 1000ms`);

    // Cleanup khi component unmount ho·∫∑c dependencies thay ƒë·ªïi
    return () => {
      clearInterval(timer);
      console.log(`üïê HealthCountdownTimer [${metricId}]: Timer stopped`);
    };
  }, [targetDate, timeRemainingHours, isCompleted, hasRegressed, metricId]); // FIX: Gi·ªØ dependencies c·∫ßn thi·∫øt ƒë·ªÉ timer restart khi data thay ƒë·ªïi

  // Hi·ªÉn th·ªã "Ho√†n th√†nh" khi th·ª±c s·ª± ho√†n th√†nh
  if (isCompleted) {
    return (
      <span className={`text-green-600 font-medium ${className}`}>
        Ho√†n th√†nh
      </span>
    );
  }

  const totalHours = timeLeft.days * 24 + timeLeft.hours;
  const countdownColor = getCountdownColor(totalHours);
  const backgroundColor = getBackgroundColor(totalHours);

  return (
    <div
      className={`inline-flex items-center gap-1 px-2 py-1 rounded-md text-sm font-medium ${backgroundColor} ${countdownColor} ${className}`}
    >
      {/* Hi·ªÉn th·ªã countdown timer v·ªõi format ƒë·∫πp */}
      {timeLeft.days > 0 && (
        <span>
          {timeLeft.days.toString().padStart(2, '0')} {translateTimeUnit('days')}
        </span>
      )}
      {timeLeft.hours > 0 && (
        <span>
          {timeLeft.hours.toString().padStart(2, '0')} {translateTimeUnit('hours')}
        </span>
      )}
      {timeLeft.minutes > 0 && (
        <span>
          {timeLeft.minutes.toString().padStart(2, '0')} {translateTimeUnit('minutes')}
        </span>
      )}
      {timeLeft.seconds > 0 && (
        <span>
          {timeLeft.seconds.toString().padStart(2, '0')} {translateTimeUnit('seconds')}
        </span>
      )}
      {/* Hi·ªÉn th·ªã "Ho√†n th√†nh" khi th·ª±c s·ª± ho√†n th√†nh */}
      {timeLeft.days === 0 && timeLeft.hours === 0 && timeLeft.minutes === 0 && timeLeft.seconds === 0 && (
        <span>Ho√†n th√†nh</span>
      )}
    </div>
  );
};

export default HealthCountdownTimer; 