import { useState, useEffect, useCallback } from 'react';
import { healthService } from '../services/healthService';
import type { HealthMetric, HealthOverview } from '../types/health';
import { HealthMetricType } from '../types/health';
import { toast } from 'sonner';

export const useHealth = () => {
  const [overview, setOverview] = useState<HealthOverview | null>(null);
  const [metrics, setMetrics] = useState<HealthMetric[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);
  const [isRefreshing, setIsRefreshing] = useState(false);

  const fetchOverview = useCallback(async () => {
    try {
      const data = await healthService.getHealthOverview();
      setOverview(data);
      setError(null);
      setLastUpdated(new Date());
    } catch (err) {
      console.error('Error fetching health overview:', err);
      setError('Kh√¥ng th·ªÉ t·∫£i t·ªïng quan s·ª©c kh·ªèe');
    }
  }, []);

  const fetchMetrics = useCallback(async () => {
    try {
      console.log('üîÑ Fetching metrics in useHealth hook...');
      // S·ª≠ d·ª•ng data th·∫≠t t·ª´ DB thay v√¨ sample data
      const data = await healthService.getAllHealthMetrics();
      console.log('‚úÖ Real metrics data received:', data);
      
      // Debug: Ki·ªÉm tra targetDate c·ªßa t·ª´ng metric
      data.forEach(metric => {
        console.log(`üìÖ ${metric.metricType}: targetDate = ${metric.targetDate}, progress = ${metric.currentProgress}%`);
      });
      
      setMetrics(data);
      setError(null);
      setLastUpdated(new Date());
    } catch (err) {
      console.error('‚ùå Error fetching health metrics:', err);
      setError('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu s·ª©c kh·ªèe');
    }
  }, []);

  const updateProgress = useCallback(async (showToast = false) => {
    try {
      setIsRefreshing(true);
      console.log('üîÑ Updating health metrics progress...');
      
      await healthService.updateHealthMetricsProgress();
      await Promise.all([fetchOverview(), fetchMetrics()]);
      
      if (showToast) {
        toast.success('C·∫≠p nh·∫≠t s·ª©c kh·ªèe th√†nh c√¥ng!');
      }
      
      console.log('‚úÖ Health metrics updated successfully');
    } catch (error) {
      console.error('‚ùå Error updating health metrics:', error);
      if (showToast) {
        toast.error('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·ª©c kh·ªèe');
      }
    } finally {
      setIsRefreshing(false);
    }
  }, [fetchOverview, fetchMetrics]);

  const getMetricByType = useCallback((type: HealthMetricType) => {
    return metrics.find(metric => metric.metricType === type);
  }, [metrics]);

  const getCompletedMetrics = useCallback(() => {
    return metrics.filter(metric => metric.isCompleted);
  }, [metrics]);

  const getInProgressMetrics = useCallback(() => {
    return metrics.filter(metric => !metric.isCompleted && metric.currentProgress > 0);
  }, [metrics]);

  const getUpcomingMetrics = useCallback(() => {
    return metrics.filter(metric => !metric.isCompleted && metric.currentProgress === 0);
  }, [metrics]);

  // Manual refresh function
  const manualRefresh = useCallback(async () => {
    try {
      console.log('üîÑ Manual refresh triggered by user');
      setIsRefreshing(true);
      
      // Force update progress t·ª´ backend
      await healthService.updateHealthMetricsProgress();
      
      // Fetch l·∫°i data m·ªõi
      await Promise.all([fetchOverview(), fetchMetrics()]);
      
      toast.success('ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu s·ª©c kh·ªèe!');
      console.log('‚úÖ Manual refresh completed successfully');
    } catch (error) {
      console.error('‚ùå Error during manual refresh:', error);
      toast.error('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t d·ªØ li·ªáu s·ª©c kh·ªèe');
    } finally {
      setIsRefreshing(false);
    }
  }, [fetchOverview, fetchMetrics]);

  // Auto-refresh function (kh√¥ng hi·ªÉn th·ªã toast)
  const autoRefresh = useCallback(async () => {
    try {
      console.log('üîÑ Auto-refresh triggered (every 5 minutes)');
      
      // Update progress t·ª´ backend (bao g·ªìm penalty calculation)
      await healthService.updateHealthMetricsProgress();
      
      // Fetch l·∫°i data m·ªõi (bao g·ªìm targetDate ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t)
      await Promise.all([fetchOverview(), fetchMetrics()]);
      
      console.log('‚úÖ Auto-refresh completed successfully');
      console.log('üìä Current metrics after refresh:', metrics);
    } catch (error) {
      console.error('‚ùå Error during auto-refresh:', error);
      // Kh√¥ng hi·ªÉn th·ªã toast cho auto-refresh
    }
  }, [fetchOverview, fetchMetrics]);

  // Initialize data only
  useEffect(() => {
    const initializeData = async () => {
      try {
        setLoading(true);
        
        // FIX: G·ªçi update tr∆∞·ªõc khi fetch data ƒë·ªÉ c√≥ data m·ªõi nh·∫•t
        console.log('üîÑ Initializing health data with update...');
        await healthService.updateHealthMetricsProgress();
        
        // Sau ƒë√≥ fetch data ƒë√£ ƒë∆∞·ª£c update
        await Promise.all([fetchOverview(), fetchMetrics()]);
        
        console.log('‚úÖ Health data initialized with latest updates');
      } catch (err) {
        console.error('Error initializing health data:', err);
        setError('Kh√¥ng th·ªÉ kh·ªüi t·∫°o d·ªØ li·ªáu s·ª©c kh·ªèe');
      } finally {
        setLoading(false);
      }
    };

    initializeData();
  }, [fetchOverview, fetchMetrics]);

  // Auto-refresh timer - c·∫≠p nh·∫≠t m·ªói 5 ph√∫t ƒë·ªÉ check penalty
  useEffect(() => {
    console.log('üïê Setting up auto-refresh timer (every 5 minutes)');
    
    const interval = setInterval(() => {
      autoRefresh();
    }, 5 * 60 * 1000); // 5 ph√∫t = 300,000ms
    
    // Cleanup khi component unmount
    return () => {
      console.log('üïê Clearing auto-refresh timer');
      clearInterval(interval);
    };
  }, [autoRefresh]);

  return {
    overview,
    metrics,
    loading,
    error,
    lastUpdated,
    isRefreshing,
    fetchOverview,
    fetchMetrics,
    updateProgress,
    getMetricByType,
    getCompletedMetrics,
    getInProgressMetrics,
    getUpcomingMetrics,
    manualRefresh
  };
}; 