import axiosConfig from "@/config/axiosConfig";
import { isAxiosError } from "axios";
import { authService } from "../authService";
import type { ApiResponse, RevenueByPeriodDTO, TransactionExportRequest, ExportResponseDTO } from "@/types/dashboard";

/**
 * ====================================================================
 * DASHBOARD SERVICE - D·ªãch v·ª• qu·∫£n l√Ω d·ªØ li·ªáu dashboard
 * ====================================================================
 * 
 * Ch·ª©c nƒÉng ch√≠nh:
 * - L·∫•y d·ªØ li·ªáu doanh thu theo c√°c kho·∫£ng th·ªùi gian kh√°c nhau (ng√†y/tu·∫ßn/th√°ng/nƒÉm)
 * - Qu·∫£n l√Ω transactions v·ªõi advanced filtering v√† pagination
 * - X·ª≠ l√Ω authentication v√† authorization
 * - Handle c√°c l·ªói API m·ªôt c√°ch th·ªëng nh·∫•t
 * 
 * Design Pattern: Singleton
 * - ƒê·∫£m b·∫£o ch·ªâ c√≥ 1 instance duy nh·∫•t c·ªßa service
 * - Tr√°nh vi·ªác t·∫°o nhi·ªÅu connection kh√¥ng c·∫ßn thi·∫øt
 */

/**
 * Interface ƒë·ªãnh nghƒ©a parameters cho API call l·∫•y doanh thu
 */
export interface GetRevenueByPeriodParams {
  groupBy: 'DAY' | 'WEEK' | 'MONTH' | 'YEAR';  // Nh√≥m d·ªØ li·ªáu theo th·ªùi gian
  startDate: string; // Format: 'YYYY-MM-DD' - Ng√†y b·∫Øt ƒë·∫ßu
  endDate: string;   // Format: 'YYYY-MM-DD' - Ng√†y k·∫øt th√∫c
}

/**
 * ====================================================================
 * TRANSACTIONS API INTERFACES
 * ====================================================================
 */

/**
 * Transaction status enum - sync v·ªõi backend
 */
export type TransactionStatus = 'SUCCESS' | 'PENDING' | 'FAILED' | 'CANCELED';

/**
 * User role enum - sync v·ªõi backend
 */
export type UserRole = 'PREMIUM_MEMBER' | 'REGULAR_MEMBER' | 'SUPER_ADMIN';

/**
 * Transaction detail DTO - sync v·ªõi backend TransactionDetailDTO
 */
export interface TransactionDetailDTO {
  transactionId: string;
  externalTransactionId: string;
  amount: number;
  transactionDate: string;
  status: TransactionStatus;
  paymentMethod: string;

  // User info
  userId: string;
  username: string;
  userEmail: string;
  userRole: UserRole;
  userProfilePicture?: string;

  // Plan info
  planId: number;
  planName: string;
  planDisplayName: string;
  planPrice: number;

  // Subscription info
  subscriptionId?: number;
  subscriptionStartDate?: string;
  subscriptionEndDate?: string;
  isSubscriptionActive?: boolean;

  createdAt: string;
  updatedAt: string;
}

/**
 * Paginated response structure
 */
export interface PagedResponse<T> {
  content: T[];
  pageable: {
    pageNumber: number;
    pageSize: number;
    sort: {
      empty: boolean;
      sorted: boolean;
      unsorted: boolean;
    };
    offset: number;
    paged: boolean;
    unpaged: boolean;
  };
  last: boolean;
  totalElements: number;
  totalPages: number;
  first: boolean;
  numberOfElements: number;
  size: number;
  number: number;
  sort: {
    empty: boolean;
    sorted: boolean;
    unsorted: boolean;
  };
  empty: boolean;
}

/**
 * Parameters cho API call l·∫•y transactions
 */
export interface GetTransactionsParams {
  // Time filtering
  period?: string; // 'LAST_30_DAYS', 'LAST_7_DAYS', 'THIS_MONTH', 'CUSTOM', etc.
  startDate?: string; // Format: 'YYYY-MM-DD' - ch·ªâ d√πng khi period='CUSTOM'
  endDate?: string;   // Format: 'YYYY-MM-DD' - ch·ªâ d√πng khi period='CUSTOM'

  // Advanced filtering
  planIds?: number[];          // Filter theo plan IDs
  userIds?: string[];          // Filter theo user IDs  
  paymentMethod?: string;      // Filter theo payment method
  includeAllStatuses?: boolean; // true = all statuses, false = ch·ªâ SUCCESS

  // Pagination & sorting
  page?: number;              // Page number (0-indexed)
  size?: number;              // Page size
  sortBy?: string;            // Sort field
  sortDirection?: 'ASC' | 'DESC'; // Sort direction
}

/**
 * Transaction filters for advanced filtering UI
 */
export interface TransactionFilters {
  dateRange: {
    startDate: string;
    endDate: string;
    preset?: string; // 'today', 'yesterday', 'last7days', etc.
  };

  plans: {
    selectedPlanIds: number[];
    planOptions: { id: number; name: string; displayName: string }[];
  };

  users: {
    selectedUserIds: string[];
    userSearchTerm: string;
  };

  status: {
    selectedStatuses: TransactionStatus[];
    includeAllStatuses: boolean;
  };

  payment: {
    selectedMethods: string[];
    methodOptions: string[];
  };

  amount: {
    minAmount?: number;
    maxAmount?: number;
  };
}

/**
 * DashboardService Class
 * Qu·∫£n l√Ω t·∫•t c·∫£ API calls li√™n quan ƒë·∫øn dashboard
 */
class DashboardService {
  private static instance: DashboardService;

  /**
   * ƒê·∫£m b·∫£o ch·ªâ c√≥ 1 instance c·ªßa DashboardService trong to√†n ·ª©ng d·ª•ng
   * 
   * L·ª£i √≠ch:
   * - Ti·∫øt ki·ªám memory
   * - Consistency trong configuration
   * - D·ªÖ d√†ng qu·∫£n l√Ω state n·∫øu c·∫ßn
   */
  public static getInstance(): DashboardService {
    if (!DashboardService.instance) {
      DashboardService.instance = new DashboardService();
    }
    return DashboardService.instance;
  }
  /**
   * L·∫•y doanh thu theo kho·∫£ng th·ªùi gian
   * 
   * Flow ho·∫°t ƒë·ªông:
   * 1. AUTHENTICATION CHECK - Ki·ªÉm tra token ƒëƒÉng nh·∫≠p
   * 2. API CALL - G·ªçi backend API v·ªõi parameters
   * 3. RESPONSE VALIDATION - Validate response t·ª´ server
   * 4. ERROR HANDLING - X·ª≠ l√Ω c√°c lo·∫°i l·ªói kh√°c nhau
   * 
   * @param params - Parameters cho API call
   * @returns Promise<RevenueByPeriodDTO[]> - M·∫£ng d·ªØ li·ªáu doanh thu
   * @throws Error v·ªõi message ph√π h·ª£p cho t·ª´ng lo·∫°i l·ªói
   */
  async getRevenueByPeriod(params: GetRevenueByPeriodParams): Promise<RevenueByPeriodDTO[]> {
    try {
      // STEP 1: AUTHENTICATION CHECK
      const token = authService.getToken();
      if (!token) {
        throw new Error('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ truy c·∫≠p d·ªØ li·ªáu dashboard');
      }

      // Debug logging - ƒë·ªÉ team c√≥ th·ªÉ trace API calls
      console.log('üìä [DashboardService] Fetching revenue data with params:', params);

      // ================================================================
      // STEP 2: API CALL TO BACKEND
      // G·ªçi API endpoint: GET /dashboard/revenue/by-period
      // Headers: Authorization ƒë∆∞·ª£c t·ª± ƒë·ªông th√™m b·ªüi axiosConfig
      const response = await axiosConfig.get<ApiResponse<RevenueByPeriodDTO[]>>(
        '/dashboard/revenue/by-period',
        {
          params: {
            groupBy: params.groupBy,    // Nh√≥m theo: DAY/WEEK/MONTH/YEAR
            startDate: params.startDate, // Ng√†y b·∫Øt ƒë·∫ßu: YYYY-MM-DD
            endDate: params.endDate     // Ng√†y k·∫øt th√∫c: YYYY-MM-DD
          }
        }
      );

      // Debug logging - ƒë·ªÉ team c√≥ th·ªÉ xem response structure
      console.log('üìà [DashboardService] Revenue API response:', response.data);

      // ================================================================
      // STEP 3: RESPONSE VALIDATION
      // Backend tr·∫£ v·ªÅ format: { status, message, data, error, timestamp }
      if (response.data.status === 200 && response.data.data) {
        return response.data.data; // Tr·∫£ v·ªÅ m·∫£ng RevenueByPeriodDTO[]
      } else {
        // Response c√≥ status kh√°c 200 ho·∫∑c kh√¥ng c√≥ data
        throw new Error(response.data.message || 'Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu doanh thu');
      }

    } catch (error: unknown) {
      // ================================================================
      // STEP 4: COMPREHENSIVE ERROR HANDLING
      console.error('‚ùå [DashboardService] L·ªói khi l·∫•y d·ªØ li·ªáu doanh thu:', error);

      // Ki·ªÉm tra n·∫øu l√† l·ªói t·ª´ Axios (HTTP errors)
      if (isAxiosError(error)) {
        // X·ª≠ l√Ω c√°c HTTP status codes c·ª• th·ªÉ
        switch (error.response?.status) {
          case 401:
            throw new Error('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
          case 403:
            throw new Error('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p d·ªØ li·ªáu dashboard');
          case 400:
            throw new Error('Tham s·ªë kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i kho·∫£ng th·ªùi gian');
          case 500:
            throw new Error('L·ªói h·ªá th·ªëng. Vui l√≤ng th·ª≠ l·∫°i sau');
          default:
            // C√°c status codes kh√°c, ∆∞u ti√™n message t·ª´ server
            if (error.response?.data?.message) {
              throw new Error(error.response.data.message);
            } else {
              throw new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server');
            }
        }
      }

      // X·ª≠ l√Ω c√°c lo·∫°i l·ªói kh√°c (network, timeout, etc.)
      if (error instanceof Error) {
        throw new Error(`L·ªói kh√¥ng x√°c ƒë·ªãnh: ${error.message}`);
      }

      // Fallback cho c√°c tr∆∞·ªùng h·ª£p kh√¥ng x√°c ƒë·ªãnh
      throw new Error('L·ªói kh√¥ng x√°c ƒë·ªãnh khi l·∫•y d·ªØ li·ªáu doanh thu');
    }
  }

  /**
   * ====================================================================
   * TRANSACTIONS MANAGEMENT METHODS
   * ====================================================================
   */

  /**
   * L·∫•y danh s√°ch transactions v·ªõi advanced filtering v√† pagination
   * 
   * @param params - Parameters cho filtering, sorting v√† pagination
   * @returns Promise<PagedResponse<TransactionDetailDTO>> - D·ªØ li·ªáu transactions c√≥ ph√¢n trang
   * @throws Error v·ªõi message ph√π h·ª£p cho t·ª´ng lo·∫°i l·ªói
   */
  async getTransactions(params: GetTransactionsParams = {}): Promise<PagedResponse<TransactionDetailDTO>> {
    try {
      // ================================================================
      // STEP 1: AUTHENTICATION CHECK
      // ================================================================
      const token = authService.getToken();
      if (!token) {
        throw new Error('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ truy c·∫≠p d·ªØ li·ªáu giao d·ªãch');
      }

      // Debug logging
      console.log('üí≥ [DashboardService] Fetching transactions with params:', params);

      // ================================================================
      // STEP 2: PREPARE QUERY PARAMETERS
      // ================================================================
      const queryParams: Record<string, string | number | boolean | string[] | number[]> = {
        // Default values
        page: params.page ?? 0,
        size: params.size ?? 20,
        sortBy: params.sortBy ?? 'transactionDate',
        sortDirection: params.sortDirection ?? 'DESC',
        includeAllStatuses: params.includeAllStatuses ?? false,
      };

      // Add optional parameters
      if (params.period) {
        queryParams.period = params.period;
      }
      if (params.startDate) {
        queryParams.startDate = params.startDate;
      }
      if (params.endDate) {
        queryParams.endDate = params.endDate;
      }
      if (params.planIds && params.planIds.length > 0) {
        queryParams.planIds = params.planIds;
      }
      if (params.userIds && params.userIds.length > 0) {
        queryParams.userIds = params.userIds;
      }
      if (params.paymentMethod) {
        queryParams.paymentMethod = params.paymentMethod;
      }

      // ================================================================
      // STEP 3: API CALL TO BACKEND
      // ================================================================
      const response = await axiosConfig.get<ApiResponse<PagedResponse<TransactionDetailDTO>>>(
        '/dashboard/transactions',
        { params: queryParams }
      );

      // Debug logging
      console.log('üí≥ [DashboardService] Transactions API response:', {
        status: response.data.status,
        totalElements: response.data.data?.totalElements,
        totalPages: response.data.data?.totalPages,
        currentPage: response.data.data?.number
      });

      // ================================================================
      // STEP 4: RESPONSE VALIDATION
      // ================================================================
      if (response.data.status === 200 && response.data.data) {
        return response.data.data;
      } else {
        throw new Error(response.data.message || 'Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu giao d·ªãch');
      }

    } catch (error: unknown) {
      console.error('‚ùå [DashboardService] L·ªói khi l·∫•y d·ªØ li·ªáu giao d·ªãch:', error);

      if (isAxiosError(error)) {
        switch (error.response?.status) {
          case 401:
            throw new Error('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
          case 403:
            throw new Error('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p d·ªØ li·ªáu giao d·ªãch');
          case 400:
            throw new Error('Tham s·ªë kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i b·ªô l·ªçc');
          case 500:
            throw new Error('L·ªói h·ªá th·ªëng. Vui l√≤ng th·ª≠ l·∫°i sau');
          default:
            if (error.response?.data?.message) {
              throw new Error(error.response.data.message);
            } else {
              throw new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server');
            }
        }
      }

      if (error instanceof Error) {
        throw new Error(`L·ªói kh√¥ng x√°c ƒë·ªãnh: ${error.message}`);
      }

      throw new Error('L·ªói kh√¥ng x√°c ƒë·ªãnh khi l·∫•y d·ªØ li·ªáu giao d·ªãch');
    }
  }

  /**
   * L·∫•y chi ti·∫øt m·ªôt transaction c·ª• th·ªÉ
   * 
   * @param transactionId - ID c·ªßa transaction c·∫ßn l·∫•y
   * @returns Promise<TransactionDetailDTO> - Chi ti·∫øt transaction
   */
  async getTransactionById(transactionId: string): Promise<TransactionDetailDTO> {
    try {
      const token = authService.getToken();
      if (!token) {
        throw new Error('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ truy c·∫≠p d·ªØ li·ªáu giao d·ªãch');
      }

      console.log('üí≥ [DashboardService] Fetching transaction detail for ID:', transactionId);

      const response = await axiosConfig.get<ApiResponse<TransactionDetailDTO>>(
        `/dashboard/transactions/${transactionId}`
      );

      if (response.data.status === 200 && response.data.data) {
        return response.data.data;
      } else {
        throw new Error(response.data.message || 'Kh√¥ng th·ªÉ l·∫•y chi ti·∫øt giao d·ªãch');
      }

    } catch (error: unknown) {
      console.error('‚ùå [DashboardService] L·ªói khi l·∫•y chi ti·∫øt giao d·ªãch:', error);

      if (isAxiosError(error)) {
        switch (error.response?.status) {
          case 404:
            throw new Error('Kh√¥ng t√¨m th·∫•y giao d·ªãch');
          case 401:
            throw new Error('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n');
          case 403:
            throw new Error('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p giao d·ªãch n√†y');
          default:
            throw new Error('L·ªói khi l·∫•y chi ti·∫øt giao d·ªãch');
        }
      }

      throw new Error('L·ªói kh√¥ng x√°c ƒë·ªãnh khi l·∫•y chi ti·∫øt giao d·ªãch');
    }
  }

  /**
   * ====================================================================
   * TRANSACTION EXPORT METHODS
   * ====================================================================
   */

  /**
   * Export transactions to CSV/Excel format
   * 
   * @param exportRequest - Export parameters
   * @returns Promise<Blob> - File blob for download
   */
  async exportTransactions(exportRequest: TransactionExportRequest): Promise<Blob> {
    try {
      const token = authService.getToken();
      if (!token) {
        throw new Error('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xu·∫•t d·ªØ li·ªáu');
      }

      console.log('üìä [DashboardService] Exporting transactions:', exportRequest);

      const response = await axiosConfig.post('/dashboard/export/transactions', exportRequest, {
        responseType: 'blob', // Important for file download
        headers: {
          'Content-Type': 'application/json',
        }
      });

      console.log('üìà [DashboardService] Export completed, file size:', response.data.size);

      return response.data;

    } catch (error: unknown) {
      console.error('‚ùå [DashboardService] Error exporting transactions:', error);

      if (isAxiosError(error)) {
        switch (error.response?.status) {
          case 401:
            throw new Error('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
          case 403:
            throw new Error('B·∫°n kh√¥ng c√≥ quy·ªÅn xu·∫•t d·ªØ li·ªáu');
          case 400:
            throw new Error('Tham s·ªë xu·∫•t d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá');
          case 500:
            throw new Error('L·ªói h·ªá th·ªëng khi xu·∫•t d·ªØ li·ªáu');
          default:
            if (error.response?.data?.message) {
              throw new Error(error.response.data.message);
            } else {
              throw new Error('Kh√¥ng th·ªÉ xu·∫•t d·ªØ li·ªáu');
            }
        }
      }

      if (error instanceof Error) {
        throw new Error(`L·ªói kh√¥ng x√°c ƒë·ªãnh: ${error.message}`);
      }

      throw new Error('L·ªói kh√¥ng x√°c ƒë·ªãnh khi xu·∫•t d·ªØ li·ªáu');
    }
  }

  /**
   * Get export information before downloading
   * 
   * @param format - Export format (CSV/EXCEL)
   * @param recordCount - Number of records to export
   * @returns Promise<ExportResponseDTO> - Export metadata
   */
  async getExportInfo(format: string, recordCount: number = 0): Promise<ExportResponseDTO> {
    try {
      const token = authService.getToken();
      if (!token) {
        throw new Error('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ l·∫•y th√¥ng tin xu·∫•t d·ªØ li·ªáu');
      }

      console.log('üìä [DashboardService] Getting export info:', { format, recordCount });

      const response = await axiosConfig.get<ApiResponse<ExportResponseDTO>>(
        '/dashboard/export/info',
        {
          params: { format, recordCount }
        }
      );

      if (response.data.status === 200 && response.data.data) {
        return response.data.data;
      } else {
        throw new Error(response.data.message || 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin xu·∫•t d·ªØ li·ªáu');
      }

    } catch (error: unknown) {
      console.error('‚ùå [DashboardService] Error getting export info:', error);

      if (isAxiosError(error)) {
        switch (error.response?.status) {
          case 401:
            throw new Error('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
          case 403:
            throw new Error('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p th√¥ng tin xu·∫•t d·ªØ li·ªáu');
          case 400:
            throw new Error('Tham s·ªë kh√¥ng h·ª£p l·ªá');
          case 500:
            throw new Error('L·ªói h·ªá th·ªëng');
          default:
            if (error.response?.data?.message) {
              throw new Error(error.response.data.message);
            } else {
              throw new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server');
            }
        }
      }

      if (error instanceof Error) {
        throw new Error(`L·ªói kh√¥ng x√°c ƒë·ªãnh: ${error.message}`);
      }

      throw new Error('L·ªói kh√¥ng x√°c ƒë·ªãnh khi l·∫•y th√¥ng tin xu·∫•t d·ªØ li·ªáu');
    }
  }

  /**
   * ====================================================================
   * UTILITY METHODS FOR EXPORT
   * ====================================================================
   */

  /**
   * Download file from blob
   * 
   * @param blob - File blob
   * @param fileName - File name
   */
  downloadFile(blob: Blob, fileName: string): void {
    try {
      // Create download URL
      const url = window.URL.createObjectURL(blob);

      // Create temporary link element
      const link = document.createElement('a');
      link.href = url;
      link.download = fileName;

      // Trigger download
      document.body.appendChild(link);
      link.click();

      // Cleanup
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);

      console.log('üì• [DashboardService] File downloaded successfully:', fileName);
    } catch (error) {
      console.error('‚ùå [DashboardService] Error downloading file:', error);
      throw new Error('Kh√¥ng th·ªÉ t·∫£i file xu·ªëng');
    }
  }

  /**
   * Generate file name for export
   * 
   * @param format - Export format
   * @param prefix - File name prefix
   * @returns Generated file name
   */
  generateExportFileName(format: string, prefix: string = 'transactions_export'): string {
    const timestamp = new Date().toISOString()
      .replace(/:/g, '-')
      .replace(/\..+/, '');

    const extension = format.toLowerCase() === 'csv' ? 'csv' : 'xlsx';
    return `${prefix}_${timestamp}.${extension}`;
  }
}

/**
 * ====================================================================
 * EXPORTED SINGLETON INSTANCE
 * ====================================================================
 * 
 * Export instance duy nh·∫•t c·ªßa DashboardService
 * To√†n b·ªô ·ª©ng d·ª•ng s·∫Ω s·ª≠ d·ª•ng instance n√†y
 * 
 * Usage trong components:
 * import { dashboardService } from '@/services/api/dashboardService'
 * const data = await dashboardService.getRevenueByPeriod(params)
 */
export const dashboardService = DashboardService.getInstance();

/**
 * ====================================================================
 * DOCUMENTATION FOR TEAM
 * ====================================================================
 * 
 * üéØ M·ª§C ƒê√çCH:
 * - T·∫°o layer abstraction gi·ªØa UI components v√† API backend
 * - X·ª≠ l√Ω authentication v√† error handling t·∫≠p trung
 * - Cung c·∫•p interface th·ªëng nh·∫•t cho vi·ªác fetch d·ªØ li·ªáu dashboard
 * 
 * üîÑ FLOW HO·∫†T ƒê·ªòNG:
 * 1. Component g·ªçi dashboardService.getRevenueByPeriod()
 * 2. Service check authentication token
 * 3. G·ªçi API v·ªõi axios, k√®m parameters
 * 4. Validate response t·ª´ backend
 * 5. Transform data ho·∫∑c throw error
 * 6. Component nh·∫≠n data ho·∫∑c handle error
 * 
 * üìä DATA FLOW:
 * Component ‚Üí Service ‚Üí API ‚Üí Backend ‚Üí Database
 *     ‚Üì         ‚Üì      ‚Üì       ‚Üì         ‚Üì
 * UI Update ‚Üê Transform ‚Üê Response ‚Üê Query ‚Üê Data
 * 
 * üõ°Ô∏è ERROR HANDLING:
 * - 401: Token expired ‚Üí Redirect to login
 * - 403: No permission ‚Üí Show permission error
 * - 400: Bad params ‚Üí Show validation error
 * - 500: Server error ‚Üí Show retry option
 * - Network: Connection issue ‚Üí Show offline message
 * 
 * üöÄ PERFORMANCE:
 * - Singleton pattern: T√°i s·ª≠ d·ª•ng instance
 * - Axios interceptors: Auto handle headers
 * - Error boundaries: Catch v√† display errors
 * 
 * üìù FUTURE ENHANCEMENTS:
 * - Th√™m caching layer (React Query ƒë√£ implement)
 * - Request debouncing cho search
 * - Background sync cho realtime updates
 * - Offline support v·ªõi service workers
 */
