"use client";

import { motion } from "framer-motion";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import type {
  HealthMilestone,
  QuitPlanResponseDTO,
} from "@/services/quitPlanService";
import { QuitPlanCalculator } from "@/utils/QuitPlanCalculator";
import { AnimatedSection } from "@/components/ui/AnimatedSection";
import { Clock, DollarSign, Heart, TrendingUp, Loader2 } from "lucide-react";
import { useCallback, useEffect, useState } from "react";
import { format } from "date-fns";
import {
  dataVisualizationService,
  type DailyChartDataResponse,
} from "@/services/dataVisualizationService";

interface BenefitsTabProps {
  quitPlan: QuitPlanResponseDTO;
}

export default function BenefitTab({ quitPlan }: BenefitsTabProps) {
  const daysSinceStart = QuitPlanCalculator.getDaysSinceStart(
    quitPlan.startDate
  );

  // State cho d·ªØ li·ªáu t·ª´ API
  const [dailyData, setDailyData] = useState<DailyChartDataResponse[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Fetch d·ªØ li·ªáu daily summaries t·ª´ startDate ƒë·∫øn hi·ªán t·∫°i
  const fetchDailyData = useCallback(async () => {
    try {
      setIsLoading(true);
      setError(null);

      const currentDate = format(new Date(), "yyyy-MM-dd");
      const startDate = format(new Date(quitPlan.startDate), "yyyy-MM-dd");

      const data = await dataVisualizationService.getDailyDataForDayRange(
        startDate,
        currentDate
      );
      setDailyData(data);
    } catch (err) {
      setError(
        err instanceof Error ? err.message : "Failed to fetch daily data"
      );
      console.error("Error fetching daily data:", err);
    } finally {
      setIsLoading(false);
    }
  }, [quitPlan.startDate]);

  useEffect(() => {
    fetchDailyData();
  }, [fetchDailyData]);

  // T√≠nh to√°n c√°c gi√° tr·ªã d·ª±a tr√™n d·ªØ li·ªáu th·ª±c t·ª´ API
  const calculateRealMetrics = () => {
    if (!dailyData.length) {
      return {
        totalMoneySaved: 0,
        totalCigarettesAvoided: 0,
        totalTimeRegained: 0,
      };
    }

    // 1. Money Saved: T·ªïng ti·ªÅn ti·∫øt ki·ªám t·ª´ c√°c record c√≥ trong DB
    const totalMoneySaved = dailyData.reduce((sum, record) => {
      return sum + (record.moneySaved || 0);
    }, 0);

    // 2. Cigarettes Avoided: (s·ªë ng√†y * initialSmokingAmount) - t·ªïng s·ªë ƒëi·∫øu ƒë√£ h√∫t
    const totalDaysInPlan = daysSinceStart;
    const totalCigarettesPlanned =
      totalDaysInPlan * quitPlan.initialSmokingAmount;
    const totalCigarettesSmoked = dailyData.reduce((sum, record) => {
      return sum + (record.totalSmokedCount || 0);
    }, 0);
    const totalCigarettesAvoided = Math.max(
      0,
      totalCigarettesPlanned - totalCigarettesSmoked
    );

    // 3. Time Regained: s·ªë ƒëi·∫øu tr√°nh ƒë∆∞·ª£c * 3 ph√∫t (chuy·ªÉn ƒë·ªïi sang gi·ªù)
    const totalTimeRegained = Math.floor((totalCigarettesAvoided * 3) / 60);

    return {
      totalMoneySaved,
      totalCigarettesAvoided,
      totalTimeRegained,
    };
  };

  const { totalMoneySaved, totalCigarettesAvoided, totalTimeRegained } =
    calculateRealMetrics();

  const healthMilestones: HealthMilestone[] = [
    {
      timeframe: "20 ph√∫t",
      title: "Nh·ªãp Tim ƒê√£ B√¨nh Th∆∞·ªùng",
      description: "Nh·ªãp tim v√† huy·∫øt √°p c·ªßa b·∫°n tr·ªü v·ªÅ m·ª©c b√¨nh th∆∞·ªùng",
      icon: "‚ù§Ô∏è",
      achieved: daysSinceStart >= 1,
    },
    {
      timeframe: "12 gi·ªù",
      title: "M·ª©c Carbon Monoxide Trong M√°u ƒê√£ B√¨nh Th∆∞·ªùng",
      description: "M·ª©c carbon monoxide trong m√°u c·ªßa b·∫°n tr·ªü v·ªÅ b√¨nh th∆∞·ªùng",
      icon: "ü´Å",
      achieved: daysSinceStart >= 1,
    },
    {
      timeframe: "1 tu·∫ßn",
      title: "V·ªã Gi√°c V√† Kh·ª©u Gi√°c C·∫£i Thi·ªán",
      description: "V·ªã gi√°c v√† kh·ª©u gi√°c c·ªßa b·∫°n b·∫Øt ƒë·∫ßu c·∫£i thi·ªán",
      icon: "üå±",
      achieved: daysSinceStart >= 7,
    },
    {
      timeframe: "2 tu·∫ßn",
      title: "Tu·∫ßn Ho√†n C·∫£i Thi·ªán",
      description:
        "Tu·∫ßn ho√†n c·ªßa b·∫°n c·∫£i thi·ªán v√† ch·ª©c nƒÉng ph·ªïi h·ªìi ph·ª•c ƒë√°ng k·ªÉ",
      icon: "üîÑ",
      achieved: daysSinceStart >= 14,
    },
    {
      timeframe: "1 th√°ng",
      title: "Gi·∫£m Ho",
      description: "Ho v√† kh√≥ th·ªü gi·∫£m ƒë√°ng k·ªÉ",
      icon: "üòÆ‚Äçüí®",
      achieved: daysSinceStart >= 30,
    },
    {
      timeframe: "3 th√°ng",
      title: "Ch·ª©c NƒÉng Ph·ªïi C·∫£i Thi·ªán R√µ R·ªát",
      description: "Ch·ª©c nƒÉng ph·ªïi c·ªßa b·∫°n b·∫Øt ƒë·∫ßu c·∫£i thi·ªán r√µ r·ªát",
      icon: "ü´Å",
      achieved: daysSinceStart >= 90,
    },
    {
      timeframe: "6 th√°ng",
      title: "Th·ªùi Gian Th∆∞·ªüng B·∫£n Th√¢n",
      description: "B·∫°n c√≥ th·ªÉ t·ª± th∆∞·ªüng cho b·∫£n th√¢n m·ªôt ƒëi·ªÅu ƒë·∫∑c bi·ªát",
      icon: "üéÅ",
      achieved: daysSinceStart >= 180,
    },
    {
      timeframe: "1 nƒÉm",
      title: "Nguy C∆° B·ªánh Tim Gi·∫£m M·ªôt N·ª≠a",
      description: "Nguy c∆° b·ªánh tim m·∫°ch c·ªßa b·∫°n gi·∫£m m·ªôt n·ª≠a",
      icon: "üí™",
      achieved: daysSinceStart >= 365,
    },
    {
      timeframe: "5 nƒÉm",
      title: "Nguy C∆° ƒê·ªôt Qu·ªµ Gi·∫£m",
      description:
        "Nguy c∆° ƒë·ªôt qu·ªµ c·ªßa b·∫°n gi·∫£m xu·ªëng b·∫±ng v·ªõi ng∆∞·ªùi kh√¥ng h√∫t thu·ªëc",
      icon: "üß†",
      achieved: daysSinceStart >= 1825,
    },
  ];

  const motivationalQuotes = [
    "Th·ªùi gian t·ªët nh·∫•t ƒë·ªÉ tr·ªìng c√¢y l√† 20 nƒÉm tr∆∞·ªõc, th·ªùi gian t·ªët th·ª© hai l√† b√¢y gi·ªù",
    "M·ªói ƒëi·∫øu thu·ªëc kh√¥ng h√∫t l√† m·ªôt chi·∫øn th·∫Øng ƒë√°ng ƒÉn m·ª´ng",
    "T∆∞∆°ng lai c·ªßa b·∫°n s·∫Ω c·∫£m ∆°n b·∫°n v√¨ nh·ªØng l·ª±a ch·ªçn b·∫°n th·ª±c hi·ªán h√¥m nay",
    "S·ª©c m·∫°nh kh√¥ng ƒë·∫øn t·ª´ nh·ªØng g√¨ b·∫°n c√≥ th·ªÉ l√†m. N√≥ ƒë·∫øn t·ª´ vi·ªác v∆∞·ª£t qua nh·ªØng g√¨ b·∫°n nghƒ© l√† kh√¥ng th·ªÉ",
    "H√†nh tr√¨nh kh√¥ng th·ªÉ th·ª±c hi·ªán ch·ªâ l√† h√†nh tr√¨nh b·∫°n kh√¥ng bao gi·ªù b·∫Øt ƒë·∫ßu",
  ];

  const todayQuote =
    motivationalQuotes[Math.floor(Math.random() * motivationalQuotes.length)];

  // Hi·ªÉn th·ªã loading state
  if (isLoading) {
    return (
      <div className="max-w-7xl mx-auto space-y-6">
        <Card className="bg-gradient-to-r from-emerald-500 to-teal-600 text-white">
          <CardContent className="p-6 text-center">
            <h2 className="text-xl font-bold mb-2">ƒêang t·∫£i d·ªØ li·ªáu...</h2>
            <div className="flex items-center justify-center space-x-2">
              <Loader2 className="w-6 h-6 animate-spin" />
              <span>Vui l√≤ng ch·ªù trong gi√¢y l√°t</span>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  // Hi·ªÉn th·ªã error state
  if (error) {
    return (
      <div className="max-w-7xl mx-auto space-y-6">
        <Card className="bg-gradient-to-r from-red-500 to-red-600 text-white">
          <CardContent className="p-6 text-center">
            <h2 className="text-xl font-bold mb-2">C√≥ l·ªói x·∫£y ra</h2>
            <p className="text-lg">{error}</p>
            <button
              onClick={fetchDailyData}
              className="mt-4 px-4 py-2 bg-white text-red-600 rounded-lg hover:bg-gray-100 transition-colors"
            >
              Th·ª≠ l·∫°i
            </button>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto space-y-6">
      {/* Motivational Quote */}
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        <Card className="bg-gradient-to-r from-emerald-500 to-teal-600 text-white">
          <CardContent className="p-6 text-center">
            <h2 className="text-xl font-bold mb-2">B·∫°n H√£y Nh·ªõ R·∫±ng</h2>
            <p className="text-lg italic">"{todayQuote}"</p>
          </CardContent>
        </Card>
      </motion.div>

      <div className="grid grid-cols-1 xl:grid-cols-3 gap-1 sm:gap-3 lg:gap-4">
        {/* Right Column */}
        {/* Plan Info Summary */}
        <div className="space-y-4">
          <AnimatedSection animation="fadeUp" delay={450}>
            <Card className="bg-gradient-to-br from-green-50 to-emerald-50 border-green-200">
              <CardHeader className="pb-3">
                <CardTitle className="flex items-center gap-2 text-green-700">
                  <DollarSign className="w-5 h-5" />
                  T·ªïng Ti·ªÅn ƒê√£ Ti·∫øt Ki·ªám
                </CardTitle>
              </CardHeader>
              <CardContent>
                <motion.div
                  className="text-3xl font-bold text-green-600"
                  initial={{ scale: 0 }}
                  animate={{ scale: 1 }}
                  transition={{ type: "spring", stiffness: 200, delay: 0.3 }}
                >
                  {totalMoneySaved.toLocaleString()} VND
                </motion.div>
                <p className="text-sm text-gray-600 mt-2">
                  Trong {daysSinceStart} ng√†y h√†nh tr√¨nh
                </p>
              </CardContent>
            </Card>
          </AnimatedSection>

          <AnimatedSection animation="fadeUp" delay={600}>
            <Card className="bg-gradient-to-br from-blue-50 to-indigo-50 border-blue-200">
              <CardHeader className="pb-3">
                <CardTitle className="flex items-center gap-2 text-blue-700">
                  <TrendingUp className="w-5 h-5" />
                  S·ªë ƒêi·∫øu Thu·ªëc ƒê√£ Tr√°nh
                </CardTitle>
              </CardHeader>
              <CardContent>
                <motion.div
                  className="text-3xl font-bold text-blue-600"
                  initial={{ scale: 0 }}
                  animate={{ scale: 1 }}
                  transition={{ type: "spring", stiffness: 200, delay: 0.4 }}
                >
                  {totalCigarettesAvoided.toLocaleString()}
                </motion.div>
                <p className="text-sm text-gray-600 mt-2">
                  ƒêi·∫øu thu·ªëc ƒë√£ kh√¥ng h√∫t
                </p>
              </CardContent>
            </Card>
          </AnimatedSection>

          <AnimatedSection animation="fadeUp" delay={600}>
            <Card className="bg-gradient-to-br from-purple-50 to-pink-50 border-purple-200">
              <CardHeader className="pb-3">
                <CardTitle className="flex items-center gap-2 text-purple-700">
                  <Clock className="w-5 h-5" />
                  Th·ªùi Gian ƒê√£ Gi√†nh L·∫°i
                </CardTitle>
              </CardHeader>
              <CardContent>
                <motion.div
                  className="text-3xl font-bold text-purple-600"
                  initial={{ scale: 0 }}
                  animate={{ scale: 1 }}
                  transition={{ type: "spring", stiffness: 200, delay: 0.5 }}
                >
                  {totalTimeRegained.toLocaleString()} gi·ªù
                </motion.div>
                <p className="text-sm text-gray-600 mt-2">
                  Gi·ªù s·ªëng ƒë√£ ƒë∆∞·ª£c gi√†nh l·∫°i
                </p>
              </CardContent>
            </Card>
          </AnimatedSection>
        </div>
        {/* Left Column */}
        {/* Health Improvement Timeline */}
        <div className="xl:col-span-2 flex flex-col space-y-3 sm:space-y-5 h-full">
          <AnimatedSection animation="fadeUp" delay={400} className="flex-1">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Heart className="w-5 h-5 text-red-500" />
                  H√†nh Tr√¨nh C·∫£i Thi·ªán S·ª©c Kh·ªèe
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {healthMilestones.map((milestone, index) => (
                    <motion.div
                      key={milestone.timeframe}
                      className={`flex items-center gap-4 p-4 rounded-lg border-2 transition-all ${
                        milestone.achieved
                          ? "bg-green-50 border-green-200"
                          : "bg-gray-50 border-gray-200"
                      }`}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: index * 0.1 }}
                    >
                      <div className="text-2xl">{milestone.icon}</div>
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-1">
                          <h3 className="font-semibold">{milestone.title}</h3>
                          <Badge variant="outline" className="text-xs">
                            {milestone.timeframe}
                          </Badge>
                          {milestone.achieved && (
                            <Badge className="bg-green-100 text-green-800 text-xs">
                              ‚úÖ ƒê·∫°t ƒë∆∞·ª£c
                            </Badge>
                          )}
                        </div>
                        <p className="text-sm text-gray-600">
                          {milestone.description}
                        </p>
                      </div>
                    </motion.div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </AnimatedSection>
        </div>
      </div>
    </div>
  );
}
