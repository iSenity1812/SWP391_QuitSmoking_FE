import { motion } from "framer-motion";
import { TrendingUp, Users, HeartHandshake } from "lucide-react";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";

interface CravingStats {
  totalCravings: number;
  commonSituations: { situation: string; count: number }[];
  commonCompanions: { companion: string; count: number }[];
}

interface MoodStats {
  totalMoodRecords: number;
  commonMoods: { mood: string; count: number }[];
}

interface StatisticsCardsProps {
  cravingStats: CravingStats;
  moodStats: MoodStats;
  isCravingStatsLoading: boolean;
  isMoodStatsLoading: boolean;
}

export function StatisticsCards({
  cravingStats,
  moodStats,
  isCravingStatsLoading,
  isMoodStatsLoading,
}: StatisticsCardsProps) {
  const getMoodAdvice = (moodVietnamese: string) => {
    const moodMap: Record<string, string> = {
      "cƒÉng th·∫≥ng": "STRESSED",
      "ch√°n n·∫£n": "BORED",
      "lo l·∫Øng": "ANXIOUS",
      "t·ª©c gi·∫≠n": "ANGRY",
      "bu·ªìn b√£": "SAD",
      vui: "HAPPY",
      "th∆∞ gi√£n": "RELAXED",
      "kh√≥ ch·ªãu": "ANNOYED",
      "tr·∫ßm c·∫£m": "DEPRESSED",
      "th·∫•t v·ªçng": "DISSAPOINTED",
      "n·∫£n l√≤ng": "DISCOURAGED",
      "xu·ªëng tinh th·∫ßn": "DOWN",
      "b·ª±c b·ªôi": "FRUSTATED",
      ƒë√≥i: "HUNGRY",
      "c√¥ ƒë∆°n": "LONELY",
      "m·ªát m·ªèi": "TIRED",
      "kh√¥ng tho·∫£i m√°i": "UNCOMFORTABLE",
      "kh√¥ng vui": "UNHAPPY",
      "kh√¥ng h√†i l√≤ng": "UNSATISFIED",
      bu·ªìn: "UPSET",
      "ph·∫•n kh√≠ch": "EXCITED",
      "lo √¢u": "WORRIED",
      "r·∫•t vui": "VERY_HAPPY",
      "r·∫•t bu·ªìn": "VERY_SAD",
      "b√¨nh th∆∞·ªùng": "NEUTRAL",
      "b√¨nh tƒ©nh": "CALM",
      "y√™n b√¨nh": "PEACEFUL",
      "t·ª± tin": "CONFIDENT",
      "hy v·ªçng": "HOPEFUL",
      "h√†i l√≤ng": "CONTENT",
      "c√≥ ƒë·ªông l·ª±c": "MOTIVATED",
      "tr√†n ƒë·∫ßy nƒÉng l∆∞·ª£ng": "ENERGETIC",
    };

    const englishMood = moodMap[moodVietnamese.toLowerCase()];

    if (
      [
        "HAPPY",
        "VERY_HAPPY",
        "EXCITED",
        "RELAXED",
        "PEACEFUL",
        "CONFIDENT",
        "HOPEFUL",
        "CONTENT",
        "MOTIVATED",
        "ENERGETIC",
        "CALM",
      ].includes(englishMood)
    ) {
      return `Tuy·ªát v·ªùi! T√¢m tr·∫°ng n√†y r·∫•t t√≠ch c·ª±c. H√£y duy tr√¨ nh·ªØng ho·∫°t ƒë·ªông v√† m√¥i tr∆∞·ªùng t·∫°o ra c·∫£m gi√°c n√†y ƒë·ªÉ h·ªó tr·ª£ h√†nh tr√¨nh cai thu·ªëc.`;
    }

    if (
      ["STRESSED", "ANXIOUS", "WORRIED", "FRUSTRATED"].includes(englishMood)
    ) {
      return `ƒêi·ªÅu n√†y c√≥ th·ªÉ s·∫Ω tƒÉng c·∫£m gi√°c th√®m thu·ªëc. H√£y th·ª≠ c√°c k·ªπ thu·∫≠t th·ªü s√¢u, thi·ªÅn, ho·∫∑c t·∫≠p th·ªÉ d·ª•c nh·∫π ƒë·ªÉ gi·∫£m c·∫£m gi√°c n√†y nh√©.`;
    }

    if (
      [
        "SAD",
        "VERY_SAD",
        "DEPRESSED",
        "DISAPPOINTED",
        "DISCOURAGED",
        "DOWN",
        "UNHAPPY",
      ].includes(englishMood)
    ) {
      return `Khi c·∫£m th·∫•y ${moodVietnamese}, b·∫°n c√≥ th·ªÉ d·ªÖ t√¨m ƒë·∫øn thu·ªëc l√°. H√£y li√™n h·ªá v·ªõi b·∫°n b√®, gia ƒë√¨nh ho·∫∑c tham gia ho·∫°t ƒë·ªông y√™u th√≠ch ƒë·ªÉ c·∫£i thi·ªán t√¢m tr·∫°ng.`;
    }

    if (["ANGRY", "ANNOYED", "UPSET"].includes(englishMood)) {
      return `C·∫£m gi√°c n√†y c√≥ th·ªÉ khi·∫øn b·∫°n mu·ªën h√∫t thu·ªëc ƒë·ªÉ "b√¨nh tƒ©nh". Thay v√†o ƒë√≥, h√£y th·ª≠ ƒëi b·ªô, nghe nh·∫°c, ho·∫∑c vi·∫øt nh·∫≠t k√Ω ƒë·ªÉ x·ª≠ l√Ω c·∫£m x√∫c.`;
    }

    if (
      ["TIRED", "HUNGRY", "UNCOMFORTABLE", "UNSATISFIED"].includes(englishMood)
    ) {
      return `ƒêi·ªÅu n√†y c√≥ th·ªÉ t·∫°o ra c·∫£m gi√°c mu·ªën "th∆∞·ªüng thu·ªëc l√°" cho b·∫£n th√¢n. H√£y c·ªë g·∫Øng chƒÉm s√≥c b·∫£n th√¢n: ngh·ªâ ng∆°i ƒë·ªß, ƒÉn u·ªëng ƒë·ªÅu ƒë·∫∑n.`;
    }

    if (["LONELY", "BORED"].includes(englishMood)) {
      return `Khi ${moodVietnamese}, thu·ªëc l√° c√≥ th·ªÉ tr·ªü th√†nh "b·∫°n ƒë·ªìng h√†nh". H√£y t√¨m ki·∫øm k·∫øt n·ªëi x√£ h·ªôi, tham gia s·ªü th√≠ch m·ªõi ho·∫∑c g·ªçi ƒëi·ªán cho ng∆∞·ªùi th√¢n.`;
    }

    if (englishMood === "NEUTRAL") {
      return `T√¢m tr·∫°ng n√†y l√† ƒëi·ªÅu t·ªët - b·∫°n ƒëang ·ªü tr·∫°ng th√°i c√¢n b·∫±ng. ƒê√¢y l√† th·ªùi ƒëi·ªÉm tuy·ªát v·ªùi ƒë·ªÉ x√¢y d·ª±ng th√≥i quen t√≠ch c·ª±c thay th·∫ø thu·ªëc l√°.`;
    }

    return `M·ªói t√¢m tr·∫°ng ƒë·ªÅu ·∫£nh h∆∞·ªüng ƒë·∫øn vi·ªác cai thu·ªëc. H√£y ghi nh·∫≠n c·∫£m x√∫c c·ªßa b·∫°n v√† t√¨m nh·ªØng c√°ch l√†nh m·∫°nh ƒë·ªÉ ƒë·ªëi ph√≥ thay v√¨ d√πng thu·ªëc l√°.`;
  };

  return (
    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 items-stretch">
      {/* Craving Situations Card */}
      <motion.div
        initial={{ opacity: 0, x: -20 }}
        animate={{ opacity: 1, x: 0 }}
        transition={{ duration: 0.5, delay: 0.6 }}
      >
        <Card className="h-full flex flex-col">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <TrendingUp className="w-5 h-5 text-orange-500" />
              Th·ªëng K√™ T√°c Nh√¢n & Ho·∫°t ƒê·ªông
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3 flex flex-col justify-around">
              {isCravingStatsLoading ? (
                <div className="text-center py-4 text-gray-500">
                  ƒêang t·∫£i d·ªØ li·ªáu th·ªëng k√™...
                </div>
              ) : (
                <>
                  <h4 className="font-medium text-gray-800 mb-2">
                    T√°c nh√¢n ph·ªï bi·∫øn nh·∫•t:
                  </h4>
                  <div className="max-h-[200px] overflow-y-auto space-y-2">
                    {cravingStats.commonSituations.map((item) => (
                      <div
                        key={item.situation}
                        className="flex justify-between items-center"
                      >
                        <span className="text-sm">{item.situation}</span>
                        <div className="flex items-center gap-2">
                          <div className="w-20 bg-gray-200 rounded-full h-2">
                            <div
                              className="bg-orange-500 h-2 rounded-full transition-all duration-500"
                              style={{
                                width:
                                  cravingStats.totalCravings > 0
                                    ? `${
                                        (item.count /
                                          cravingStats.totalCravings) *
                                        100
                                      }%`
                                    : "0%",
                              }}
                            />
                          </div>
                          <span className="text-sm font-medium w-8 text-right">
                            {item.count}
                          </span>
                        </div>
                      </div>
                    ))}
                  </div>

                  <div className="mt-4 p-3 bg-orange-50 rounded-lg">
                    <p className="text-sm text-orange-700">
                      üí° <strong>G·ª£i √Ω:</strong>{" "}
                      {cravingStats.commonSituations[0]?.count > 0 ? (
                        <>
                          B·∫°n th∆∞·ªùng h√∫t/th√®m thu·ªëc nh·∫•t khi{" "}
                          <span className="font-bold bg-orange-200 px-2 py-1 rounded-md text-orange-800">
                            {cravingStats.commonSituations[0].situation.toLowerCase()}
                          </span>
                          . H√£y tr√°nh ho·∫∑c chu·∫©n b·ªã chi·∫øn l∆∞·ª£c ƒë·ªëi ph√≥ v·ªõi t√¨nh
                          hu·ªëng n√†y.
                        </>
                      ) : (
                        "Ch∆∞a c√≥ ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ ƒë∆∞a ra g·ª£i √Ω. H√£y ti·∫øp t·ª•c ghi nh·∫≠n ƒë·ªÉ nh·∫≠n ƒë∆∞·ª£c ph√¢n t√≠ch c√° nh√¢n h√≥a."
                      )}
                    </p>
                  </div>
                </>
              )}
            </div>
          </CardContent>
        </Card>
      </motion.div>

      {/* Social Context Card */}
      <motion.div
        initial={{ opacity: 0, x: 20 }}
        animate={{ opacity: 1, x: 0 }}
        transition={{ duration: 0.5, delay: 0.7 }}
      >
        <Card className="h-full flex flex-col">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Users className="w-5 h-5 text-blue-500" />
              B·ªëi C·∫£nh X√£ H·ªôi
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3 flex flex-col justify-around">
              {isCravingStatsLoading ? (
                <div className="text-center py-4 text-gray-500">
                  ƒêang t·∫£i d·ªØ li·ªáu th·ªëng k√™...
                </div>
              ) : (
                <>
                  <h4 className="font-medium text-gray-800 mb-2">
                    Ho·∫°t ƒë·ªông theo b·ªëi c·∫£nh:
                  </h4>
                  <div className="max-h-[200px] overflow-y-auto space-y-2">
                    {cravingStats.commonCompanions.map((item) => (
                      <div
                        key={item.companion}
                        className="flex justify-between items-center"
                      >
                        <span className="text-sm">{item.companion}</span>
                        <div className="flex items-center gap-2">
                          <div className="w-20 bg-gray-200 rounded-full h-2">
                            <div
                              className="bg-blue-500 h-2 rounded-full transition-all duration-500"
                              style={{
                                width:
                                  cravingStats.totalCravings > 0
                                    ? `${
                                        (item.count /
                                          cravingStats.totalCravings) *
                                        100
                                      }%`
                                    : "0%",
                              }}
                            />
                          </div>
                          <span className="text-sm font-medium w-8 text-right">
                            {item.count}
                          </span>
                        </div>
                      </div>
                    ))}
                  </div>

                  <div className="mt-4 p-3 bg-blue-50 rounded-lg">
                    <p className="text-sm text-blue-700">
                      üí° <strong>G·ª£i √Ω:</strong>{" "}
                      {cravingStats.commonCompanions[0]?.count > 0 ? (
                        <>
                          B·∫°n th∆∞·ªùng h√∫t/th√®m thu·ªëc nh·∫•t khi{" "}
                          <span className="font-bold bg-blue-200 px-2 py-1 rounded-md text-blue-800">
                            {cravingStats.commonCompanions[0].companion.toLowerCase()}
                          </span>
                          . H√£y chu·∫©n b·ªã k·∫ø ho·∫°ch ƒë·ªÉ ƒë·ªëi ph√≥ v·ªõi t√¨nh hu·ªëng n√†y.
                        </>
                      ) : (
                        "Ch∆∞a c√≥ ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ ƒë∆∞a ra g·ª£i √Ω. H√£y ti·∫øp t·ª•c ghi nh·∫≠n ƒë·ªÉ nh·∫≠n ƒë∆∞·ª£c ph√¢n t√≠ch c√° nh√¢n h√≥a."
                      )}
                    </p>
                  </div>
                </>
              )}
            </div>
          </CardContent>
        </Card>
      </motion.div>

      {/* Mood Statistics Card */}
      <motion.div
        initial={{ opacity: 0, x: 20 }}
        animate={{ opacity: 1, x: 0 }}
        transition={{ duration: 0.5, delay: 0.8 }}
      >
        <Card className="h-full flex flex-col">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <HeartHandshake className="w-5 h-5 text-emerald-700" />
              Th·ªëng K√™ T√¢m Tr·∫°ng
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3 flex flex-col justify-around">
              {isMoodStatsLoading ? (
                <div className="text-center py-4 text-gray-500">
                  ƒêang t·∫£i d·ªØ li·ªáu th·ªëng k√™...
                </div>
              ) : (
                <>
                  <h4 className="font-medium text-gray-800 mb-2">
                    T√¢m tr·∫°ng ph·ªï bi·∫øn nh·∫•t:
                  </h4>
                  <div className="max-h-[200px] overflow-y-auto space-y-2">
                    {moodStats.commonMoods.map((item) => (
                      <div
                        key={item.mood}
                        className="flex justify-between items-center"
                      >
                        <span className="text-sm">{item.mood}</span>
                        <div className="flex items-center gap-2">
                          <div className="w-20 bg-gray-200 rounded-full h-2">
                            <div
                              className="bg-green-500 h-2 rounded-full transition-all duration-500"
                              style={{
                                width:
                                  moodStats.totalMoodRecords > 0
                                    ? `${
                                        (item.count /
                                          moodStats.totalMoodRecords) *
                                        100
                                      }%`
                                    : "0%",
                              }}
                            />
                          </div>
                          <span className="text-sm font-medium w-8 text-right">
                            {item.count}
                          </span>
                        </div>
                      </div>
                    ))}
                  </div>

                  <div className="mt-4 p-3 bg-green-50 rounded-lg">
                    <p className="text-sm text-green-700">
                      üí° <strong>G·ª£i √Ω:</strong>{" "}
                      {moodStats.commonMoods[0]?.count > 0
                        ? (() => {
                            const topMood =
                              moodStats.commonMoods[0].mood.toLowerCase();
                            return (
                              <>
                                T√¢m tr·∫°ng ph·ªï bi·∫øn nh·∫•t c·ªßa b·∫°n l√†{" "}
                                <span className="font-bold bg-green-200 px-2 py-1 rounded-md text-green-800">
                                  {topMood}
                                </span>
                                . {getMoodAdvice(topMood)}
                              </>
                            );
                          })()
                        : "Ch∆∞a c√≥ ƒë·ªß d·ªØ li·ªáu v·ªÅ t√¢m tr·∫°ng. H√£y ti·∫øp t·ª•c ghi nh·∫≠n ƒë·ªÉ theo d√µi s·ª± thay ƒë·ªïi t√¢m tr·∫°ng trong h√†nh tr√¨nh cai thu·ªëc."}
                    </p>
                  </div>
                </>
              )}
            </div>
          </CardContent>
        </Card>
      </motion.div>
    </div>
  );
}
